#N canvas 724 28 783 913 10;
#N canvas 0 22 1428 977 noise_mix 0;
#X obj 134 247 noise~;
#X obj 134 277 *~, f 11;
#X obj 197 246 line~;
#X obj 119 306 +~;
#X obj 119 338 outlet~;
#X msg 197 218 \$1 5;
#X obj 119 133 inlet~;
#X text 179 338 mix out;
#X text 173 133 Oscillator in;
#X text 302 193 Noise volume slider input;
#X text 228 18 Noise mix volume;
#X obj 197 192 r 106noise_mix;
#X connect 0 0 1 0;
#X connect 1 0 3 1;
#X connect 2 0 1 1;
#X connect 3 0 4 0;
#X connect 5 0 2 0;
#X connect 6 0 3 0;
#X connect 11 0 5 0;
#X restore 201 541 pd noise_mix;
#N canvas 19 65 1630 876 106_oscillator 0;
#X obj 161 200 line~;
#X obj 381 197 line~;
#X obj 145 459 *~;
#X obj 366 462 *~;
#X obj 706 195 inlet~;
#X obj 227 287 phasor~ 80;
#X obj 255 565 +~;
#X obj 925 229 inlet~;
#X text 976 230 PWM input;
#X text 399 399 Square wave;
#X text 70 460 Saw wave;
#X text 446 191 Switch;
#X text 748 197 frequency input;
#X text 729 117 [Phasor~] produit une onde en dent de scie qui va de
0 à 1 Pour avoir une onde bipolaire (-1 à 1) il faut donc doubler
son amplitude et soustraire 1 : [expr~ ($v1 * 2) -1];
#X text 1136 178 En changeant la valeur de comparaison \, on modifie
l'épaisseur de l'onde carrée (Pulse Width).;
#X text 1136 103 Pour produire une onde carrée à partir de [phasor~]
(bipolaire) \, il faut comparer chaque sample à un chiffre entre 0
et 1 (ex.: < 0) et dire que si le résultat de la comparaison est vrai
\, output le chiffre 1 \, sinon \, -1, f 54;
#X msg 161 177 \$1 5;
#X msg 381 174 \$1 5;
#X text 158 121 Toggle input (saw wave on/off);
#X text 380 120 Toggle input (square wave on/off);
#X obj 706 413 phasor~;
#X obj 706 390 *~ 0.5;
#X text 946 496 from saw wave to square wave;
#X text 830 461 Scale waveform from (0. \, 1.) to (-1. \, 1.);
#X text 250 879 Oscillator output;
#X obj 255 788 *~;
#X obj 270 761 line~;
#X obj 706 748 *~, f 7;
#X obj 745 719 line~;
#X obj 270 706 expr ($f1 * -1) + 1;
#X obj 255 829 +~;
#X msg 745 691 \$1 5;
#X msg 270 733 \$1 5;
#X text 467 543 Mix slider input (0. \, 1.);
#X obj 255 853 outlet~;
#X text 429 715 Crossfade between oscillator and sub oscillator, f
28;
#X obj 463 618 loadbang;
#X msg 463 641 0;
#X obj 366 423 expr~ if ($v1 > $v2 \, 1 \, -1);
#X obj 706 492 expr~ if ($v1 > $v2 \, 1 \, -1), f 37;
#X obj 161 145 r 106_saw_switch;
#X obj 381 145 r 106_square_switch;
#X obj 468 574 r 106_sub_mix;
#X obj 227 315 *~ 2;
#X obj 227 338 -~ 1;
#X obj 706 438 *~ 2;
#X obj 706 461 -~ 1;
#X connect 0 0 2 1;
#X connect 1 0 3 1;
#X connect 2 0 6 0;
#X connect 3 0 6 1;
#X connect 4 0 5 0;
#X connect 4 0 21 0;
#X connect 5 0 43 0;
#X connect 6 0 25 0;
#X connect 7 0 38 1;
#X connect 7 0 39 1;
#X connect 16 0 0 0;
#X connect 17 0 1 0;
#X connect 20 0 45 0;
#X connect 21 0 20 0;
#X connect 25 0 30 0;
#X connect 26 0 25 1;
#X connect 27 0 30 1;
#X connect 28 0 27 1;
#X connect 29 0 32 0;
#X connect 30 0 34 0;
#X connect 31 0 28 0;
#X connect 32 0 26 0;
#X connect 36 0 37 0;
#X connect 37 0 29 0;
#X connect 37 0 31 0;
#X connect 38 0 3 0;
#X connect 39 0 27 0;
#X connect 40 0 16 0;
#X connect 41 0 17 0;
#X connect 42 0 31 0;
#X connect 42 0 29 0;
#X connect 43 0 44 0;
#X connect 44 0 38 0;
#X connect 44 0 2 0;
#X connect 45 0 46 0;
#X connect 46 0 39 0;
#X restore 201 494 pd 106_oscillator;
#N canvas 102 61 1193 687 LFO_Delay_Time 0;
#X obj 194 427 *~;
#X obj 209 372 line~;
#X obj 373 303 pack 0 1 f;
#X obj 209 315 delay;
#X msg 236 248 stop;
#X msg 373 328 0 \, \$2 \$3;
#X msg 209 340 stop \, 0 1;
#X obj 194 115 inlet~;
#X text 245 116 LFO input (signal);
#X obj 194 459 outlet~;
#X text 250 460 Delayed LFO output (signal);
#X text 494 54 LFO delay time. What it does : It applies a ramp from
0 to 1 in n ms to the LFO. Since there's only one LFO \, once the [*~]
is fully open it must stay there until the release stage of the envelope
is finished \, then resetted. If the synth runs out of voices \, and
a new note is played \, the ramp must start over from 0;
#X text 44 323 Close the LFO after release phase is done, f 22;
#X obj 372 247 loadbang;
#X msg 372 271 0;
#X obj 209 200 sel 0;
#X obj 236 223 bang;
#X obj 209 174 inlet, f 6;
#X text 260 175 Note on/off (velocity);
#X obj 236 288 r 106_release;
#X obj 430 247 r 106_LFO_delay_time;
#X text 436 227 LFO Delay Time slider input (0. \, 5000.);
#X obj 209 400 *~;
#X text 240 401 curve;
#X connect 0 0 9 0;
#X connect 1 0 22 0;
#X connect 1 0 22 1;
#X connect 2 0 5 0;
#X connect 3 0 6 0;
#X connect 4 0 3 0;
#X connect 5 0 1 0;
#X connect 6 0 1 0;
#X connect 7 0 0 0;
#X connect 13 0 14 0;
#X connect 14 0 2 2;
#X connect 15 0 3 0;
#X connect 15 1 16 0;
#X connect 16 0 2 0;
#X connect 16 0 4 0;
#X connect 17 0 15 0;
#X connect 19 0 3 1;
#X connect 20 0 2 2;
#X connect 22 0 0 1;
#X restore 568 345 pd LFO_Delay_Time;
#N canvas 586 87 1172 891 LFO_pitch_depth 0;
#X obj 390 883 *~;
#X obj 296 784 line~;
#X obj 116 947 +~;
#X obj 296 710 mtof;
#X obj 296 648 t b f;
#X obj 296 681 *, f 5;
#X obj 296 735 - 8.1758;
#X obj 116 1016 outlet~;
#X text 173 1019 Pitch (frequency) value (signal);
#X obj 390 835 inlet~;
#X text 442 834 LFO input (signal), f 19;
#X obj 116 887 mtof~;
#X text 375 714 Midi note 0 = 8.1758 hz \, so if we want our slider
in the zero position to give us zero modulation \, we must subtract
8.1758;
#X text 372 660 By multiplying midi notes numbers with a number from
0 to 1 \, the modulation of the frequency is proportionnal to the frequency.
;
#X msg 296 759 \$1 5;
#X text 302 595 LFO Pitch Depth slider (0. \, 1.);
#X obj 116 587 line~;
#X obj 181 587 line;
#X text 162 66 Midi note input (0 127);
#X obj 155 444 pack 0 0 0;
#X obj 116 392 route 0;
#X msg 116 364 \$2 \$1;
#X obj 116 336 pack 0 0;
#X msg 155 417 \$2;
#X msg 155 471 \$2 \, \$1 \$3;
#X text 393 40 LFO Pitch modulation depth and portamento;
#X obj 131 745 bendin;
#X obj 116 843 +~;
#X msg 131 770 \$1 5;
#X obj 131 795 line~;
#X text 134 720 Pitch bend;
#X obj 296 621 r 106_LFO_pitch_depth;
#X obj 212 295 r 106_portamento;
#X obj 116 65 inlet;
#X text 317 295 Portamento slider input (0. \, 1000.), f 18;
#X obj 183 165 pipe 20;
#X obj 183 136 r note_portamento;
#X connect 0 0 2 1;
#X connect 1 0 0 1;
#X connect 2 0 7 0;
#X connect 3 0 6 0;
#X connect 4 0 5 0;
#X connect 4 1 5 1;
#X connect 5 0 3 0;
#X connect 6 0 14 0;
#X connect 9 0 0 0;
#X connect 11 0 2 0;
#X connect 14 0 1 0;
#X connect 16 0 27 0;
#X connect 17 0 5 0;
#X connect 19 0 24 0;
#X connect 20 0 16 0;
#X connect 20 0 17 0;
#X connect 20 1 23 0;
#X connect 21 0 20 0;
#X connect 22 0 21 0;
#X connect 23 0 19 0;
#X connect 24 0 16 0;
#X connect 24 0 17 0;
#X connect 26 0 28 0;
#X connect 27 0 11 0;
#X connect 28 0 29 0;
#X connect 29 0 27 1;
#X connect 31 0 4 0;
#X connect 32 0 22 1;
#X connect 32 0 19 2;
#X connect 33 0 22 0;
#X connect 35 0 19 1;
#X connect 36 0 35 0;
#X restore 201 400 pd LFO_pitch_depth;
#N canvas 50 45 1479 881 Voltage_Controlled_Filter 0;
#X obj 886 388 line~;
#X obj 1241 408 *~;
#X obj 1256 377 line~;
#X obj 601 610 +~;
#X msg 886 364 \$1 5;
#X msg 1256 349 \$1 5;
#X obj 123 623 inlet~;
#X obj 123 739 outlet~;
#X text 181 740 LPF Output (signal);
#X text 122 603 Audio input (signal);
#X text 1240 125 LFO input (signal);
#X text 500 51 Voltage Controled Filter (VCF);
#X obj 123 676 bob~, f 160;
#X text 878 695 4 pole resonant low pass filter;
#X obj 309 233 inlet~;
#X obj 601 570 +~;
#X text 307 212 Envelope in (signal);
#X obj 359 518 *~;
#X obj 374 493 line~;
#X msg 374 469 \$1 5;
#N canvas 364 92 1320 754 env_invert_switch 0;
#X obj 27 151 sel 0 1;
#X obj 425 426 line~;
#X msg 425 402 \$1 5;
#X obj 410 451 *~;
#X msg 27 186 0;
#X msg 58 186 1;
#X msg 118 186 0;
#X msg 88 186 1;
#X obj 395 536 +~;
#X obj 240 419 line~;
#X msg 240 395 \$1 5;
#X obj 225 444 *~;
#X obj 410 215 inlet~;
#X text 83 358 inverted envelope;
#X text 473 413 envelope;
#X obj 27 44 inlet;
#X obj 395 569 outlet~;
#X text 413 194 envelope input (signal);
#X text 452 571 envelope output (signal);
#X text 26 21 Switch input (toggle);
#X obj 40 99 loadbang;
#X msg 40 123 0;
#X text 131 96 Select which envelope to take (off = normal envelope
\, on = inverted envelope), f 41;
#X obj 225 347 *~ -1;
#X connect 0 0 4 0;
#X connect 0 0 5 0;
#X connect 0 1 7 0;
#X connect 0 1 6 0;
#X connect 1 0 3 1;
#X connect 2 0 1 0;
#X connect 3 0 8 1;
#X connect 4 0 10 0;
#X connect 5 0 2 0;
#X connect 6 0 2 0;
#X connect 7 0 10 0;
#X connect 8 0 16 0;
#X connect 9 0 11 1;
#X connect 10 0 9 0;
#X connect 11 0 8 0;
#X connect 12 0 3 0;
#X connect 12 0 23 0;
#X connect 15 0 0 0;
#X connect 20 0 21 0;
#X connect 21 0 0 0;
#X connect 23 0 11 0;
#X restore 192 260 pd env_invert_switch;
#X text 191 128 Switch input (toggle) (off = normal envelope \, on
= inverted envelope), f 24;
#X text 934 378 Smooth, f 11;
#X obj 616 166 inlet;
#X obj 616 218 mtof~;
#X obj 616 193 sig~;
#X obj 616 523 +~;
#X obj 616 471 *~;
#X obj 631 436 line~;
#X msg 631 412 \$1 5;
#X text 615 142 Midi note in (0 127);
#X obj 1080 650 line~;
#X msg 1080 626 \$1 5;
#X text 1128 640 Smooth, f 11;
#X text 373 348 env depth slider input (0 \, 1), f 17;
#X obj 192 176 r 106_VCF_env_mode;
#X obj 374 386 r 106_VCF_env_depth;
#X obj 631 383 r 106_VCF_kybd;
#X obj 886 333 r 106_VCF_freq;
#X obj 1080 599 r 106_VCF_Res;
#X text 1079 577 VCF Res slider input (0. \, 1.);
#X obj 1256 319 r 106_VCF_LFO;
#X obj 1241 144 inlet~;
#X text 637 332 Keyboard track slider input (0. \, 1.5), f 14;
#X text 885 294 VCF Frequency slider input (0. \, 5625.), f 20;
#X text 1256 299 LFO Depth slider input (0 \, 10000);
#X obj 601 643 clip~ 0.2 20000;
#X connect 0 0 26 1;
#X connect 1 0 3 1;
#X connect 2 0 1 1;
#X connect 3 0 46 0;
#X connect 4 0 0 0;
#X connect 5 0 2 0;
#X connect 6 0 12 0;
#X connect 12 0 7 0;
#X connect 14 0 20 1;
#X connect 15 0 3 0;
#X connect 17 0 15 0;
#X connect 18 0 17 1;
#X connect 19 0 18 0;
#X connect 20 0 17 0;
#X connect 23 0 25 0;
#X connect 24 0 27 0;
#X connect 25 0 24 0;
#X connect 26 0 15 1;
#X connect 27 0 26 0;
#X connect 28 0 27 1;
#X connect 29 0 28 0;
#X connect 31 0 12 2;
#X connect 32 0 31 0;
#X connect 35 0 20 0;
#X connect 36 0 19 0;
#X connect 37 0 29 0;
#X connect 38 0 4 0;
#X connect 39 0 32 0;
#X connect 41 0 5 0;
#X connect 42 0 1 0;
#X connect 46 0 12 1;
#X restore 201 631 pd Voltage_Controlled_Filter;
#N canvas 56 37 1448 947 envelope_generator 0;
#X obj 358 718 vline~;
#X obj 897 467 pack 0 f, f 27;
#X msg 358 624 1 \$2 \, \$4 \$3 \$2;
#X obj 358 591 pack 0 f f f, f 32;
#X obj 897 427 r allnoteoff;
#X text 694 31 ADSR envelope;
#X text 545 543 Sustain (0. \, 1.);
#X obj 358 801 outlet~;
#X obj 175 767 outlet~;
#X text 355 823 Envelope output (signal);
#X text 368 269 [1 \$2 \, \$4 \$3 \$2];
#X text 369 295 Go to 1 in \$2 (attack) ms \, go to \$4 (sustain) in
\$3 (decay) ms after having waited \$2 (attack duration) ms, f 31
;
#X text 369 244 ADS stages;
#X text 901 489 Release stage (go to 0 in (release) ms);
#X obj 175 715 vline~;
#X text 83 642 On note on \, go to 1 in 1.5 ms, f 11;
#X text 81 698 On note off \, go to 0 in 1.5 ms, f 12;
#X text 82 617 Gate mode;
#X text 170 787 Gate output (signal);
#X msg 175 646 0 1.5;
#X msg 221 646 1 1.5, f 13;
#X obj 706 610 r gate_to_env;
#X msg 706 636 0 1.5;
#X text 801 610 That prevents getting the tail of the release when
switching from gate to envelope mode, f 44;
#X obj 331 130 sel 0;
#X obj 358 184 bang;
#X text 372 105 Receives note on and off;
#X obj 331 106 inlet;
#X obj 421 452 r 106_attack;
#X obj 484 510 r 106_decay;
#X obj 547 564 r 106_sustain;
#X obj 1056 425 r 106_release;
#X text 421 434 Attack (1.5 \, 3000.);
#X text 483 487 Decay (1.5 \, 12000.);
#X text 1055 402 Release (1.5 \, 12000.);
#X obj 358 757 *~;
#X text 391 758 Curve;
#X obj 122 351 r clear_notes;
#X obj 122 373 bang;
#X msg 122 395 0 5;
#X connect 0 0 35 1;
#X connect 0 0 35 0;
#X connect 1 0 0 0;
#X connect 2 0 0 0;
#X connect 3 0 2 0;
#X connect 4 0 1 0;
#X connect 14 0 8 0;
#X connect 19 0 14 0;
#X connect 20 0 14 0;
#X connect 21 0 22 0;
#X connect 22 0 0 0;
#X connect 24 0 1 0;
#X connect 24 0 19 0;
#X connect 24 1 25 0;
#X connect 25 0 3 0;
#X connect 25 0 20 0;
#X connect 27 0 24 0;
#X connect 28 0 3 1;
#X connect 29 0 3 2;
#X connect 30 0 3 3;
#X connect 31 0 1 1;
#X connect 35 0 7 0;
#X connect 37 0 38 0;
#X connect 38 0 39 0;
#X connect 39 0 0 1;
#X connect 39 0 14 0;
#X restore 547 525 pd envelope_generator;
#N canvas 23 84 1216 670 Voltage_Controlled_Amplifier 0;
#X obj 123 594 *~;
#X obj 248 536 *~;
#X msg 625 343 \$1 5;
#X obj 625 367 line~;
#X obj 123 91 inlet~;
#X obj 365 245 inlet~;
#X obj 123 635 outlet~;
#X text 412 25 VCA;
#X text 120 57 Audio input (signal), f 12;
#X text 362 213 Envelope input (signal), f 15;
#X text 182 636 Audio output (signal);
#X obj 515 260 sel 0 1;
#X obj 365 417 *~;
#X msg 451 320 \$1 5;
#X obj 248 473 +~;
#X obj 248 417 *~;
#X msg 515 321 \$1 5;
#X obj 248 293 inlet~;
#X text 246 261 gate input (signal), f 11;
#X text 514 44 Envelope or gate switch (toggle), f 19;
#X obj 525 212 loadbang;
#X msg 525 234 0;
#X msg 451 292 0;
#X msg 482 292 1;
#X msg 515 292 1;
#X msg 551 292 0;
#X obj 515 347 line~;
#X obj 451 344 line~;
#X obj 479 509 s gate_to_env;
#X text 581 502 Bang is sent to the envelope subpatch when switch goes
from gate to envelope mode and cut the tail of the envelope release
stage. Otherwise \, even though the gate could be off \, when switching
back to envelope mode you could hear the release stage.;
#X obj 515 149 r 106_VCA_env_type;
#X obj 625 316 r 106_VCA_level;
#X text 674 353 Smooth data;
#X text 623 289 Volume slider input (0. \, 0.4);
#X connect 0 0 6 0;
#X connect 1 0 0 1;
#X connect 2 0 3 0;
#X connect 3 0 1 1;
#X connect 4 0 0 0;
#X connect 5 0 12 0;
#X connect 11 0 22 0;
#X connect 11 0 24 0;
#X connect 11 0 28 0;
#X connect 11 1 23 0;
#X connect 11 1 25 0;
#X connect 12 0 14 1;
#X connect 13 0 27 0;
#X connect 14 0 1 0;
#X connect 15 0 14 0;
#X connect 16 0 26 0;
#X connect 17 0 15 0;
#X connect 20 0 21 0;
#X connect 21 0 11 0;
#X connect 22 0 13 0;
#X connect 23 0 13 0;
#X connect 24 0 16 0;
#X connect 25 0 16 0;
#X connect 26 0 12 1;
#X connect 27 0 15 1;
#X connect 30 0 11 0;
#X connect 31 0 2 0;
#X restore 201 736 pd Voltage_Controlled_Amplifier;
#X obj 201 143 inlet;
#X text 163 192 Note;
#N canvas 0 22 1427 896 pulse_width_modulation 0;
#X msg 168 296 \$1 50;
#X obj 168 321 line~;
#X obj 168 481 +~;
#X obj 326 402 *~;
#X msg 446 313 \$1 10;
#X obj 446 341 line~;
#X obj 590 257 t b f;
#X obj 446 289 expr ((1 - $f1) - 0.02) * $f2;
#X obj 326 323 inlet~;
#X text 697 220 Pulse Width Modulation depth slider input (0. \, 1.)
;
#X text 308 289 LFO input (signal), f 9;
#X text 663 29 Pulse Width Modulation controls;
#X obj 168 551 outlet~;
#X text 157 582 To oscillator's PWM input...;
#X text 648 286 Here we make sure that the PW will never be higher
than 0.98 or lower than 0.02.;
#X obj 446 129 r 106_manual_PW;
#X obj 590 220 r 106_PWM_depth;
#X text 647 445 In the original Juno 106 \, you either control the
pulse width (PW) manually or with the LFO. There's a switch to select
one or the other method. Here \, I made it so that you can control
the PW manually and the Pulse width modulation (LFO depth) simultaneously
without the possibility of being a DC wave (only high (or low) all
the time)., f 51;
#X text 444 93 Manual Pulse Width slider input (0. \, 0.9.), f 24
;
#X connect 0 0 1 0;
#X connect 1 0 2 0;
#X connect 2 0 12 0;
#X connect 3 0 2 1;
#X connect 4 0 5 0;
#X connect 5 0 3 1;
#X connect 6 0 7 0;
#X connect 6 1 7 1;
#X connect 7 0 4 0;
#X connect 8 0 3 0;
#X connect 15 0 0 0;
#X connect 15 0 7 0;
#X connect 16 0 6 0;
#X restore 300 466 pd pulse_width_modulation;
#X obj 201 793 outlet~;
#X text 201 821 Voice audio output (signal);
#X obj 568 159 inlet~;
#X text 565 135 LFO input;
#X obj 201 189 stripnote;
#X msg 282 193 \$2;
#X text 312 193 velocity (and note off);
#X text 201 117 Note velocity input;
#X text 202 51 Juno-104 polyphonic voice;
#X connect 0 0 4 0;
#X connect 1 0 0 0;
#X connect 2 0 9 0;
#X connect 2 0 3 1;
#X connect 2 0 4 3;
#X connect 3 0 1 0;
#X connect 4 0 6 0;
#X connect 5 0 6 1;
#X connect 5 1 6 2;
#X connect 5 1 4 1;
#X connect 6 0 10 0;
#X connect 7 0 14 0;
#X connect 7 0 15 0;
#X connect 9 0 1 1;
#X connect 12 0 2 0;
#X connect 14 0 4 2;
#X connect 14 0 3 0;
#X connect 15 0 2 1;
#X connect 15 0 5 0;
